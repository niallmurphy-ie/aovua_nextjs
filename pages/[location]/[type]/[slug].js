import Head from 'next/head';
import Layout from '../../../components/Layout';
import PageTitle from '../../../components/main/PageTitle';
import Service from '../../../components/main/service/Service';
import client from '../../../lib/apolloClient';
import {
	LOCATION_URLPREFIX,
	ENTERTAINMENT,
	ENTERTAINMENTS,
} from '../../../lib/queries';

const ServicePage = ({ location, entertainment, entertainments }) => {
	// location gives the first location if multuple are selected.

	const pageTitle = entertainment.Name || '';
	const breadcrumb = entertainment
		? {
				url: `/${location.urlPrefix}/vui-choi-giai-tri`,
				name: `${location.Name} - Vui chơi giải trí`,
		  }
		: null;

	return (
		<>
			<Head>
				<title>{pageTitle}</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Layout home={false}>
				<PageTitle pageTitle={pageTitle} breadcrumb={breadcrumb} />
				{/* <Article
					article={article}
					articles={articles}
					categories={categories}
				/> */}
				<Service service={entertainment} />
			</Layout>
		</>
	);
};

export async function getStaticPaths() {
	const paths = [];
	// Start Entertainment
	const entertainmentsQuery = await client.query({
		query: ENTERTAINMENTS,
	});
	entertainmentsQuery.data.entertainments.forEach((entertainment) => {
		if (entertainment.locations.length > 0) {
			const params = [];
			const locations = entertainment.locations.map(
				(location) => location.urlPrefix
			);
			locations.forEach((location) =>
				params.push({
					location: location,
					type: 'vui-choi-giai-tri',
					slug: entertainment.slug,
				})
			);
			params.forEach((param) => paths.push({ params: param }));
		}
	});
	// End entertainment

	return {
		paths,
		fallback: false,
	};
}

export async function getStaticProps(context) {
	console.log(`context.params`, context.params);

	// All queries for all types of services
	const locationQuery = client.query({
		query: LOCATION_URLPREFIX,
		variables: {
			urlPrefix: context.params.location,
		},
	});
	const entertainmentQuery = client.query({
		query: ENTERTAINMENT,
		variables: {
			slug: context.params.slug,
		},
	});
	const entertainmentsQuery = client.query({
		query: ENTERTAINMENTS,
	});

	const responses = await Promise.all([
		locationQuery,
		entertainmentQuery,
		entertainmentsQuery,
	]);

	console.log(`responses`, responses);

	return {
		props: {
			location: responses[0].data.locations[0],
			entertainment: responses[1].data.entertainments[0],
			entertainments: responses[2].data.entertainments,
		},
	};
}

export default ServicePage;
