import Head from 'next/head';
import Layout from '../../../components/Layout';
import PageTitle from '../../../components/main/PageTitle';
import client from '../../../lib/apolloClient';
import {
	LOCATION_URLPREFIX,
	ENTERTAINMENT,
	ENTERTAINMENTS,
} from '../../../lib/queries';

const ArticlePage = ({ location, entertainment, entertainments }) => {
	console.log(location, entertainment);
	return (
		<>
			<Head>
				<title>{entertainment.Name}</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Layout home={false}>
				<PageTitle pageTitle={entertainment.Name} breadcrumb={null} />
				{/* <Article
					article={article}
					articles={articles}
					categories={categories}
				/> */}
			</Layout>
		</>
	);
};

export async function getStaticPaths() {
	// const categoriesQuery = await client.query({
	// 	query: CATEGORIES,
	// });

	// const paths = [];
	// categoriesQuery.data.categories.forEach((category) => {
	// 	if (category.articles.length > 0) {
	// 		const params = [];
	// 		const slugs = category.articles.map((article) => article.slug);
	// 		slugs.forEach((slug) =>
	// 			params.push({
	// 				type: category.urlPrefix.split('/')[1], // First part is hard-coded in Strapi.
	// 				slug,
	// 			})
	// 		);
	// 		params.forEach((param) => paths.push({ params: param }));
	// 	}
	// });

	// return {
	// 	paths,
	// 	fallback: false,
	// };
	return {
		paths: [
			{
				params: {
					location: 'ao-vua-xanh',
					type: 'vui-choi-giai-tri',
					slug: 'nha-bong-nha-lien-hoan',
				},
			},
		],
		fallback: false,
	};
}

export async function getStaticProps(context) {
	console.log(`context.params.slug`, context.params.slug)
	console.log(`context.params`, context.params)
	const entertainmentQuery = client.query({
		query: ENTERTAINMENT,
		variables: {
			slug: context.params.slug,
		},
	});

	const locationQuery = client.query({
		query: LOCATION_URLPREFIX,
		variables: {
			urlPrefix: context.params.location,
		},
	});

	const entertainmentsQuery = client.query({
		query: ENTERTAINMENTS,
	});

	const responses = await Promise.all([
		entertainmentQuery,
		locationQuery,
		entertainmentsQuery,
	]);

	console.log(`responses`, responses)
	return {
		props: {
			entertainment: responses[0].data.entertainments[0],
			location: responses[1].data.locations[0],
			entertainments: responses[2].data.entertainments,
		},
	};
}

export default ArticlePage;
